<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Blinky}-->
  <class name="Blinky" superclass="qpc::QActive">
   <!--${AOs::Blinky::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Blinky::SM::motor_machine}-->
    <state name="motor_machine">
     <!--${AOs::Blinky::SM::motor_machine::initial}-->
     <initial target="../1">
      <initial_glyph conn="13,20,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::Blinky::SM::motor_machine::PowerOffSt}-->
     <state name="PowerOffSt">
      <!--${AOs::Blinky::SM::motor_machine::PowerOffSt::EV_ON}-->
      <tran trig="EV_ON" target="../../2">
       <tran_glyph conn="33,20,1,3,25">
        <action box="6,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,14,16,14"/>
     </state>
     <!--${AOs::Blinky::SM::motor_machine::PowerOnSt}-->
     <state name="PowerOnSt">
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::initial}-->
      <initial target="../3">
       <initial_glyph conn="64,24,5,3,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::EV_ERROR}-->
      <tran trig="EV_ERROR" target="../../3">
       <tran_glyph conn="58,50,3,1,-25">
        <action box="-17,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::EV_MONITOR_TEMP}-->
      <tran trig="EV_MONITOR_TEMP">
       <action>IF overtemperature():
    schedEV(EV_ERROR)</action>
       <tran_glyph conn="58,60,3,-1,23">
        <action box="0,-2,22,7"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::InitializeSt}-->
      <state name="InitializeSt">
       <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::InitializeSt::EV_READY}-->
       <tran trig="EV_READY" target="../../4">
        <tran_glyph conn="84,24,1,3,19">
         <action box="3,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="68,18,16,13"/>
      </state>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::ReadySt}-->
      <state name="ReadySt">
       <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::ReadySt::EV_RUN}-->
       <tran trig="EV_RUN" target="../../5">
        <tran_glyph conn="117,30,2,0,13">
         <action box="-10,7,10,2"/>
        </tran_glyph>
       </tran>
       <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::ReadySt::EV_MAINTAIN}-->
       <tran trig="EV_MAINTAIN" target="../../../4/1">
        <tran_glyph conn="126,24,1,3,36">
         <action box="14,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="103,18,23,12"/>
      </state>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::RunningSt}-->
      <state name="RunningSt">
       <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::RunningSt::EV_STOP}-->
       <tran trig="EV_STOP" target="../../6">
        <tran_glyph conn="103,50,3,1,-17">
         <action box="-14,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="103,43,23,14"/>
      </state>
      <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::StoppingSt}-->
      <state name="StoppingSt">
       <!--${AOs::Blinky::SM::motor_machine::PowerOnSt::StoppingSt::EV_STOPPED}-->
       <tran trig="EV_STOPPED" target="../../4">
        <tran_glyph conn="82,43,0,2,-8,28,-5">
         <action box="7,-10,13,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="68,43,18,14"/>
      </state>
      <state_glyph node="58,9,72,57"/>
     </state>
     <!--${AOs::Blinky::SM::motor_machine::ErrorSt}-->
     <state name="ErrorSt">
      <state_glyph node="17,41,16,15"/>
     </state>
     <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt}-->
     <state name="MaintainenceSt">
      <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt::EV_OK}-->
      <tran trig="EV_OK" target="../../2/4">
       <tran_glyph conn="154,50,3,1,-13,-24,-15">
        <action box="-14,1,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt::AMainainSt}-->
      <state name="AMainainSt">
       <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt::AMainainSt::EV_A_B}-->
       <tran trig="EV_A_B" target="../../2">
        <tran_glyph conn="174,28,2,0,9">
         <action box="-13,4,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="162,14,23,14"/>
      </state>
      <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt::BMainainSt}-->
      <state name="BMainainSt">
       <!--${AOs::Blinky::SM::motor_machine::MaintainenceSt::BMainainSt::EV_RUN}-->
       <tran trig="EV_RUN" target="../../../2/5">
        <tran_glyph conn="174,55,2,2,6,-58,-4">
         <action box="-35,3,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="162,37,23,18"/>
      </state>
      <state_glyph node="154,6,38,57"/>
     </state>
     <state_glyph node="3,1,192,68"/>
    </state>
    <state_diagram size="197,76"/>
   </statechart>
  </class>
  <!--${AOs::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky *me = (Blinky *)AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::blinky.c}-->
  <file name="blinky.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::Blinky}

/* instantiate the Blinky active object ------------------------------------*/
static Blinky l_blinky;
QActive * const AO_Blinky = &amp;l_blinky.super;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Blinky_ctor}
$define${AOs::Blinky}</text>
  </file>
  <!--${.::bsp.h}-->
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);
void BSP_ledOff(void);
void BSP_ledOn(void);

/* define the event signals used in the application ------------------------*/
enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    MAX_SIG /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_Blinky; /* opaque pointer to the Blinky AO */
$declare${AOs::Blinky_ctor}

#endif /* BSP_H */</text>
  </file>
  <!--${.::bsp.c}-->
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

void BSP_init(void)   {
    printf(&quot;Simple Blinky example\n&quot;
           &quot;QP/C version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}
void BSP_ledOff(void) { printf(&quot;LED OFF\n&quot;); }
void BSP_ledOn(void)  { printf(&quot;LED ON\n&quot;);  }

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK_X(0U, (void *)0); /* QF clock tick processing for rate 0 */
}
void Q_onAssert(char const * const module, int loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}</text>
  </file>
  <!--${.::main.c}-->
  <file name="main.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

Q_DEFINE_THIS_FILE

/* the main function -------------------------------------------------------*/
int main() {
    static QEvt const *blinky_queueSto[10]; /* event queue buffer for Blinky */

    QF_init();  /* initialize the framework */
    BSP_init(); /* initialize the BSP */

    /* instantiate and start the Blinky active object */
    Blinky_ctor(); /* in C you must explicitly call the Blinky constructor */
    QACTIVE_START(AO_Blinky, /* active object to start */
        1U,                  /* priority of the active object */
        blinky_queueSto,     /* event queue buffer */
        Q_DIM(blinky_queueSto), /* the length of the buffer */
        (void *)0, 0U,       /* private stack (not used) */
        (QEvt *)0);          /* initialization event (not used) */

    return QF_run(); /* let the framework run the application */
}</text>
  </file>
  <!--${.::Makefile}-->
  <file name="Makefile">
   <text># Makefile for building QP/C application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
# make CONF=spy
# make clean   # cleanup the build
# make CONF=spy clean   # cleanup the build
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    http://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := blinky

#-----------------------------------------------------------------------------
# project directories:
#

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \

# location of the QP/C framework (if not provided in an env. variable)
ifeq ($(QPC),)
QPC := /qp/qpc
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS := \
    blinky.c \
    bsp.c \
    main.c

# C++ source files...
CPP_SRCS :=

LIB_DIRS :=
LIBS     :=

# defines...
# QP_API_VERSION controls the QP API compatibility; 9999 means the latest API
DEFINES   := -DQP_API_VERSION=9999

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP/C framework:
#
C_SRCS += \
    qep_hsm.c \
    qep_msm.c \
    qf_act.c \
    qf_actq.c \
    qf_defer.c \
    qf_dyn.c \
    qf_mem.c \
    qf_ps.c \
    qf_qact.c \
    qf_qeq.c \
    qf_qmact.c \
    qf_time.c \
    qf_port.c

QS_SRCS := \
    qs.c \
    qs_64bit.c \
    qs_rx.c \
    qs_fp.c \
    qs_port.c

ifeq ($(OS),Windows_NT)

# NOTE:
# For Windows hosts, you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/win32-qv
#QP_PORT_DIR := $(QPC)/ports/win32
LIBS += -lws2_32

else

# NOTE:
# For POSIX hosts (Linux, MacOS), you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/posix-qv
#QP_PORT_DIR := $(QPC)/ports/posix
LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPC)/src/qf $(QP_PORT_DIR)
INCLUDES += -I$(QPC)/include -I$(QP_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     https://www.state-machine.com/qtools
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := gcc
CPP   := g++
LINK  := gcc    # for C programs
#LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := build_spy

C_SRCS   += $(QS_SRCS)
VPATH    += $(QPC)/src/qs

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

ifndef GCC_OLD
    LINKFLAGS := -no-pie
endif

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

#-----------------------------------------------------------------------------
# rules
#

.PHONY: clean show

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(CC) $(CFLAGS) $(QPC)/src/qs/qstamp.c -o $(BIN_DIR)/qstamp.o
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(BIN_DIR)/qstamp.o $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

# create BIN_DIR and include dependencies only if needed
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),show)
ifneq ($(MAKECMDGOALS),debug)
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
endif
endif
endif

clean :
    -$(RM) $(BIN_DIR)/*.o \
    $(BIN_DIR)/*.d \
    $(TARGET_EXE)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)
</text>
  </file>
 </directory>
</model>
